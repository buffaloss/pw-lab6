{"ast":null,"code":"// ThemeContext.js\n// import React, { createContext, useState, useContext } from 'react';\n// const ThemeContext = createContext();\n// export const ThemeProvider = ({ children }) => {\n//   const [theme, setTheme] = useState('light');\n//   const [backgroundColor, setBackgroundColor] = useState('#4793AF'); // Default light background color\n//   const toggleTheme = () => {\n//     setTheme((prevTheme) => (prevTheme === 'light' ? 'dark' : 'light'));\n//     setBackgroundColor((prevColor) => (prevColor === '#4793AF' ? '#222222' : '#4793AF')); // Change background color accordingly\n//   };\n//   return (\n//     <ThemeContext.Provider value={{ theme, toggleTheme, backgroundColor }}>\n//       {children}\n//     </ThemeContext.Provider>\n//   );\n// };\n// export const useTheme = () => useContext(ThemeContext);\nimport{createContext,useContext,useState,useLayoutEffect}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";const ThemeContext=/*#__PURE__*/createContext();const ThemeProvider=_ref=>{let{children}=_ref;const initialTheme=()=>localStorage.getItem(\"app_theme\")||\"light\";// Initialize theme from localStorage or default to 'light'\nconst[theme,setTheme]=useState(initialTheme);const toggleTheme=()=>setTheme(theme=>theme===\"light\"?\"dark\":\"light\");useLayoutEffect(()=>{localStorage.setItem(\"app_theme\",theme);// Save theme to localStorage\nif(theme===\"light\"){document.documentElement.classList.remove(\"dark-mode\");document.documentElement.classList.add(\"light-mode\");}else{document.documentElement.classList.remove(\"light-mode\");document.documentElement.classList.add(\"dark-mode\");}},[theme]);return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:{theme,toggleTheme},children:children});};const useTheme=()=>{const context=useContext(ThemeContext);if(context===undefined){throw new Error(\"useTheme must be used within a ThemeProvider\");}return context;};export{ThemeProvider,useTheme};","map":{"version":3,"names":["createContext","useContext","useState","useLayoutEffect","jsx","_jsx","ThemeContext","ThemeProvider","_ref","children","initialTheme","localStorage","getItem","theme","setTheme","toggleTheme","setItem","document","documentElement","classList","remove","add","Provider","value","useTheme","context","undefined","Error"],"sources":["/home/ubuntu/Desktop/uni-labs/pw-lab6/src/ThemeContext.js"],"sourcesContent":["// ThemeContext.js\n// import React, { createContext, useState, useContext } from 'react';\n\n// const ThemeContext = createContext();\n\n// export const ThemeProvider = ({ children }) => {\n//   const [theme, setTheme] = useState('light');\n//   const [backgroundColor, setBackgroundColor] = useState('#4793AF'); // Default light background color\n\n\n//   const toggleTheme = () => {\n//     setTheme((prevTheme) => (prevTheme === 'light' ? 'dark' : 'light'));\n//     setBackgroundColor((prevColor) => (prevColor === '#4793AF' ? '#222222' : '#4793AF')); // Change background color accordingly\n//   };\n\n//   return (\n//     <ThemeContext.Provider value={{ theme, toggleTheme, backgroundColor }}>\n//       {children}\n//     </ThemeContext.Provider>\n//   );\n// };\n\n// export const useTheme = () => useContext(ThemeContext);\n\nimport { createContext, useContext, useState, useLayoutEffect } from \"react\";\n\nconst ThemeContext = createContext();\n\nconst ThemeProvider = ({ children }) => {\n  const initialTheme = () => localStorage.getItem(\"app_theme\") || \"light\"; // Initialize theme from localStorage or default to 'light'\n  const [theme, setTheme] = useState(initialTheme);\n\n  const toggleTheme = () => setTheme((theme) => (theme === \"light\" ? \"dark\" : \"light\"));\n\n  useLayoutEffect(() => {\n    localStorage.setItem(\"app_theme\", theme); // Save theme to localStorage\n\n    if (theme === \"light\") {\n      document.documentElement.classList.remove(\"dark-mode\");\n      document.documentElement.classList.add(\"light-mode\");\n    } else {\n      document.documentElement.classList.remove(\"light-mode\");\n      document.documentElement.classList.add(\"dark-mode\");\n    }\n  }, [theme]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nconst useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};\n\nexport { ThemeProvider, useTheme };\n"],"mappings":"AAAA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAASA,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,eAAe,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE7E,KAAM,CAAAC,YAAY,cAAGN,aAAa,CAAC,CAAC,CAEpC,KAAM,CAAAO,aAAa,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACjC,KAAM,CAAAE,YAAY,CAAGA,CAAA,GAAMC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,EAAI,OAAO,CAAE;AACzE,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGZ,QAAQ,CAACQ,YAAY,CAAC,CAEhD,KAAM,CAAAK,WAAW,CAAGA,CAAA,GAAMD,QAAQ,CAAED,KAAK,EAAMA,KAAK,GAAK,OAAO,CAAG,MAAM,CAAG,OAAQ,CAAC,CAErFV,eAAe,CAAC,IAAM,CACpBQ,YAAY,CAACK,OAAO,CAAC,WAAW,CAAEH,KAAK,CAAC,CAAE;AAE1C,GAAIA,KAAK,GAAK,OAAO,CAAE,CACrBI,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,MAAM,CAAC,WAAW,CAAC,CACtDH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,GAAG,CAAC,YAAY,CAAC,CACtD,CAAC,IAAM,CACLJ,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,MAAM,CAAC,YAAY,CAAC,CACvDH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,GAAG,CAAC,WAAW,CAAC,CACrD,CACF,CAAC,CAAE,CAACR,KAAK,CAAC,CAAC,CAEX,mBACER,IAAA,CAACC,YAAY,CAACgB,QAAQ,EAACC,KAAK,CAAE,CAAEV,KAAK,CAAEE,WAAY,CAAE,CAAAN,QAAA,CAClDA,QAAQ,CACY,CAAC,CAE5B,CAAC,CAED,KAAM,CAAAe,QAAQ,CAAGA,CAAA,GAAM,CACrB,KAAM,CAAAC,OAAO,CAAGxB,UAAU,CAACK,YAAY,CAAC,CACxC,GAAImB,OAAO,GAAKC,SAAS,CAAE,CACzB,KAAM,IAAI,CAAAC,KAAK,CAAC,8CAA8C,CAAC,CACjE,CACA,MAAO,CAAAF,OAAO,CAChB,CAAC,CAED,OAASlB,aAAa,CAAEiB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}